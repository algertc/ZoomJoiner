
from windows_gui_automation.findWindowElements import *
import time


class gui_action_support(object):
    def __init__(self):
        self.working_gui_elements = {}

    def set_working_gui_handle(self,
                               hwnd,
                               args = ['static']):
        self.working_gui_elements = {}
        self.working_gui_handle = hwnd
        fwe = findWindowElements()
        fwe.ListWindows(hwnd, args)
        self.working_gui_elements=fwe.WindowElements
    def _click_button(self,
                      text,
                      ExactMatch=True,
                      click_to_check=None, #None (always click), False make sure unchecked, True make sure checked
                      ):
        
        assert self.working_gui_elements, 'no windows elements defined'
        for k,v in self.working_gui_elements.items():
            if ExactMatch:
                if text == v.get('name'):
                    print ('set active window')
                    print (SetActiveWindow(k))
                    print ('clicking button with handle',k)
                    state = SendMessage(k,BM_GETCHECK, 0, 0)
                    #lets now get the state of the button
                    if click_to_check != None:
                        state = SendMessage(k,BM_GETCHECK, 0, 0)
                        if click_to_check == True:
                            if state == BST_UNCHECKED:
                                CLICK = True
                            if state == BST_CHECKED:
                                CLICK = False
                        if click_to_check == False:
                            if state == BST_CHECKED:
                                CLICK = True
                            if state == BST_UNCHECKED:
                                CLICK = False
                        
                    else:
                        CLICK = True

                    if CLICK:
                        if state == 2:
                            print ('button is greyed out, lets try to click it anyway')
                    

                        PostMessage(k,BM_CLICK, True, 0)              
                    
            else:
                if text in v.get('name'):
                    print ('set active window')
                    print (SetActiveWindow(k))
                    time.sleep(1)
                    
                    print ('clicking button with handle',k)
                    PostMessage(k,BM_CLICK, True, 0)
                        
    
    def _look_for_static_text(self,
                             text,
                             ExactMatch=True):
        assert self.working_gui_elements, 'no windows elements defined'
        for k,v in self.working_gui_elements.items():
            if ExactMatch:
                if text == v.get('name'):
                    return True      
                    
            else:
                if text in v.get('name'):
                    return True
        return False

def kill_pid(pid):
    """kill function for Win32"""
    handle = OpenProcess(1, 0, pid)
    print ('killing %d' %pid)
    return (0 != windll.kernel32.TerminateProcess(handle, 0))
